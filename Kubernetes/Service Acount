In Kubernetes, a Service Account is a type of account specifically used by applications or workloads running within the cluster, 
rather than by human users. Service accounts allow pods  and other Kubernetes resources to securely interact with the Kubernetes API, and 
perform actions such as creating persistent volumes, deploying applications, and interacting with other resources.
They help enforce security by restricting what the application can access within the cluster.
Each namespace has a default service account that is automatically attached to pods if no other service account is specified.

A Service Account in Kubernetes is an identity used by processes running inside a pod to interact with the Kubernetes API server.
By default, Kubernetes assigns the default Service Account to all pods unless you specify otherwise. 
You can create and assign custom Service Accounts to pods to grant specific permissions based on RBAC policies.

Using Service Acount in a Pod:

apiVersion: v1
kind: Pod
metadata:
  name: my-pod
  namespace: default
spec:
  serviceAccountName: custom-service-account
  containers:
  - name: my-container
    image: my-application-image

################################

Granting permission to a service acount

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]


apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-pods-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: custom-service-account
  namespace: default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io





