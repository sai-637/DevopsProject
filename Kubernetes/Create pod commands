what is pod in kubernetes:

In Kubernetes, a Pod is the basic execution unit and deployable object that represents a single instance of a running application or service. 
A Pod is made up of one or more Containers, which are run alongside each other in the same process space.
Pods are ephemeral, meaning they can be removed and recreated as needed. 
Each Pod has its own IP address and port numbers, allowing multiple Pods to run on the same node without conflicts.
Pods are the smallest unit of scalability and fault tolerance in Kubernetes, making them a fundamental concept in containerized orchestration.
if a pod (or the node it executes on) fails, Kubernetes can automatically create a new replica of that pod to continue operations.


To create pod
kubectl run nginx --image=nginx
Get status of pod
kubectl get pods
all info 
kubectl get all
Syntax of yaml file
kubectl explain pods
To create individual pod by using yaml file
vi test.yml

apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: nginx
    ports:
    - containerPort: 80
then
kubectl create -f test.yml 
to delete pod
kubectl delete pod my-pod
all info,syntax of pods
kubectl explain pods --recursive





Create Deployment pod:
vi deploy.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-container
        image: nginx
        ports:
        - containerPort: 80
kubectl create -f deploy.yml
in Deployemt we can change replicas,we can give 5
then..apply changes
kubectl apply -f deploy.yml
we can change image
kubectl set image deployment/my-deployment(podName) my-container(containerName)=nginx:latest
here changed image version ,we can also rollback to previous version by
kubectl rollout undo deployment/my-deployment(podName)
we can chnages here
kubectl get replicaset
when we give wrong image name,we can see info why our image fail
kubectl describe deployment.apps/my-deployment


in deployment,we delete one pod i will create another pod
we can delete pod permanently 
kubectl delete deployment/pod_name

kubectl get po --show-labels ----> display labels 
kubectl exec -it mysql -- /bin/bash ----> to enter into specific container or pod
kubectl delete cluster ${NAME} --yes ---> to delete a cluster




selector:
 it is used for grouping,we are having multiple deployment files and service file is supposed to be same 
so how service file is identify the with the network access provide,
then how would service know that on which deployment or pod we are supposed to provide network access,
thats the reason selector is used it will match the labels inside the selector

Template:

Actually it is a blue print to create a pod.

Specifications:

spec contains details about the container

containerPort:

containerport that will be opened on the container that will be created inside he pod 

nodePort:
it will give accesss for over the outside the internet,
for im going to deploy this deployment and service files from this nginx server is deployed,
to access that server we will use this nodeport

nodeport will be range between 30000 to 32768


