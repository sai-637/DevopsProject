Kube-apiserver is responsible for authenticating, validating requests, retrieving and Updating data in ETCD key-value store. 
In fact kube-apiserver is the only component that interacts directly to the etcd datastore.
The other components such as kube-scheduler, kube-controller-manager and kubelet uses the API-Server to update in the cluster in their respective areas.

The Kube API Server is a primary component of the Kubernetes control plane, responsible for managing and exposing the Application Programming Interface (API) for cluster resources.
It exposed the Kubernetes API to users and accepts CRUD (Create, Read, Update, Delete) operations from clients. 
The API Server authenticates and authorizes users, validates and processes requests, and updates the etcd database.
It's the entry point for most users and systems interacting with the cluster, allowing them to manage and manipulate cluster resources such as pods, services, and deployments

Handling API Requests: The API Server processes requests from clients (like kubectl, controllers, or other components) and performs the corresponding actions on the cluster. 
These requests could be about creating, updating, deleting, or retrieving resources like Pods, Services, Deployments, etc.

Cluster State Management: The API Server maintains the state of all cluster resources by interacting with etcd, the distributed key-value store. 
When changes occur (e.g., a new pod is created), the API Server updates the state in etcd, ensuring consistency and availability of cluster data.

The API Server can authenticate users and services using tokens, certificates, or other mechanisms.
After authentication, the API Server enforces RBAC (Role-Based Access Control) to ensure that only users or services with the correct permissions can access specific resources.
API Server acting as the interface for managing cluster data stored in etcd.

Kubernetes API Server Workflow
Here’s a simplified overview of how the Kubernetes API Server works:

Client Request: A user (or a system component like the Scheduler or Controller Manager) sends an API request (via kubectl or another client) to the API Server.

Authentication: The API Server authenticates the request using tokens, certificates, or other authentication mechanisms.

Authorization: The API Server checks the user’s permissions through RBAC to see if they are allowed to perform the requested action.

Admission Control: The request is passed through admission controllers that validate or modify the request (e.g., applying security policies or limiting resource requests).

Action Execution: The API Server performs the action, such as creating, updating, or deleting a resource. It interacts with etcd to store the new state.

Response: The API Server sends a response back to the client with the outcome of the request, which may include data about the resource or a success/error message.

Kubernetes API Server Components
Kubelet: The Kubelet is responsible for managing the lifecycle of containers on each node. It communicates with the API Server to get the current state and desired state of Pods and then takes action to reconcile the two.

Controllers: Controllers monitor the state of the cluster and make changes to ensure that the desired state matches the actual state. The API Server provides the interface for controllers to update resources in the cluster (e.g., ReplicaSet, Deployment, etc.).

Scheduler: The Scheduler is responsible for assigning Pods to nodes based on available resources. The Scheduler interacts with the API Server to get the list of available nodes and schedules Pods to those nodes.

etcd: A distributed key-value store that holds the cluster’s state, including information about Pods, Services, ConfigMaps, and other resources. The API Server reads and writes data to etcd to maintain the cluster state.


