TLS (Transport Layer Security) in Kubernetes enables secure communication between pods and services. 
Kubernetes uses TLS certificates and keys to establish secure connections. 
You can configure TLS in Kubernetes using ConfigMaps, Secrets, and Certificates. 
ConfigMaps and Secrets store sensitive data, such as certificates and keys, which can be used to generate a certificate signing request (CSR) or a self-signed certificate.
Certificates can be generated using tools like OpenSSL or CertManager. 
This setup ensures secure communication within your Kubernetes cluster and protects against man-in-the-middle attacks.

In Kubernetes, TLS is typically used to secure communication between different components, such as:

Between external clients and services (e.g., HTTPS traffic).
Between services within the cluster.
For securing communication with the Kubernetes API server.

1. Generate TLS Certificates
You can generate TLS certificates using openssl or another certificate authority (CA).

For example, to create a TLS certificate for a service:

# Generate a private key
openssl genrsa -out tls.key 2048

# Create a Certificate Signing Request (CSR)
openssl req -new -key tls.key -out tls.csr \
  -subj "/CN=yourdomain.com/O=yourorganization"

# Self-sign the certificate (or you can use a CA)
openssl x509 -req -in tls.csr -signkey tls.key -out tls.crt -days 365
This creates:

tls.key: Private key for your service.
tls.crt: TLS certificate (signed or self-signed).


2. Create a Kubernetes Secret for TLS
Once you have the TLS key and certificate, you can create a Kubernetes Secret to store them. 
This secret can then be referenced by services or Ingress resources for HTTPS encryption.

kubectl create secret tls tls-secret --cert=tls.crt --key=tls.key

This command creates a secret named tls-secret containing the TLS certificate and key.


3.. Use TLS in Ingress
To expose a service using HTTPS via an Ingress, you can configure the Ingress resource to reference the TLS secret.

      apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"  # Redirect HTTP to HTTPS
spec:
  tls:
  - hosts:
      - example.com
    secretName: tls-secret  # The secret that contains the TLS certificate and private key
  rules:
  - host: example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-service  # Name of the backend service to route traffic to
            port:
              number: 80      # The port on which the service is running

metadata.name: This is the name of the Ingress resource (example-ingress).

annotations: The nginx.ingress.kubernetes.io/ssl-redirect: "true" annotation ensures that HTTP requests are automatically redirected to HTTPS.

spec.tls:
hosts: Defines the domain (example.com) that this Ingress should secure using TLS.

secretName: The name of the Kubernetes Secret (tls-secret) that contains the TLS certificate (tls.crt) and private key (tls.key). This secret should have been created beforehand with the command:

kubectl create secret tls tls-secret --cert=tls.crt --key=tls.key

spec.rules:
host: Defines the host name (example.com) for which this Ingress rule applies.

http.paths:
path: The path to match in HTTP requests (in this case, / matches all paths).

backend: Defines the backend service to which traffic should be forwarded. It specifies the service name (my-service) and the port number (80) where the service is listening.
Usage:
This Ingress resource will:

Secure traffic to example.com using the TLS certificate stored in the tls-secret.
Redirect all HTTP traffic to HTTPS.
Route HTTPS requests for example.com to the my-service service on port 80.
Make sure that:

The TLS secret (tls-secret) contains a valid certificate and private key.
An Ingress controller, such as NGINX Ingress Controller, is deployed in your Kubernetes cluster to handle the Ingress resource.


4. Secure Internal Communication
You can also use TLS to secure communication between services inside the Kubernetes cluster. 
This involves ensuring services support TLS and configuring Secrets for them to use the necessary certificates and keys.

For example, a pod could mount the TLS certificates from a Kubernetes Secret as a volume and configure the service to use those certificates for encrypted communication.

5. Verify HTTPS
Once the Ingress is configured and deployed, you can access your service via HTTPS. 
The browser or client should trust the certificate if it's issued by a trusted Certificate Authority (CA),
or you may need to add the self-signed certificate to the trusted store


Use Cases for TLS Certificates in Kubernetes
API Server Authentication:
The Kubernetes API server uses TLS certificates for securing communications with clients (e.g., kubectl) and nodes (e.g., kubelet).
Service-to-Service Communication:
Pods and services within the cluster can use mutual TLS (mTLS) to authenticate and encrypt communication between each other.
Ingress Controllers:
TLS certificates are used to secure external access to services exposed via Ingress controllers.
etcd Encryption:
etcd, the Kubernetes cluster state store, uses TLS for secure communication between nodes and the API server.
Kubelet and API Server Communication:
TLS certificates authenticate and encrypt communication between the kubelet and the Kubernetes API server.

###########################################################################################################

Kubeconfig:

Kubeconfig is a configuration file used by kubectl and other Kubernetes clients to interact with Kubernetes clusters.
It contains information about cluster connections, authentication credentials, namespaces, and other configuration details necessary to manage a Kubernetes environment.
In simple terms, kubeconfig is the file that holds the context and connection details for interacting with different Kubernetes clusters. It allows users to manage multiple clusters and switch between them as needed.

We can move these information to a configuration file called kubeconfig. And the specify this file as the kubeconfig option in the command.

kubectl get pods --kubeconfig config

To view the current file being used

$ kubectl config view

Set or modify the kubeconfig file:
You can specify a custom kubeconfig file using the --kubeconfig flag:
kubectl --kubeconfig=/path/to/your/kubeconfig get pods

#########################################################################################################
Cluster Roles:

Roles and Rolebindings are namespaced meaning they are created within namespaces.
Namespaces
Can you group or isolate nodes within a namespace?

No, those are cluster wide or cluster scoped resources. They cannot be associated to any particular namespace.
So the resources are categorized as either namespaced or cluster scoped.

To see namespaced resources

 kubectl api-resources --namespaced=true
 To see non-namespaced resources
 kubectl api-resources --namespaced=false  ---> Clusterscoped

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-administrator
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["nodes"]
  verbs: ["get", "list", "delete", "create"]

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-admin-role-binding
subjects:
- kind: User
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: cluster-administrator
  apiGroup: rbac.authorization.k8s.io
