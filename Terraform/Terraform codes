main.tf file
##################
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "us-west-2"
}
provider "aws" {
  alias = "west"
  region     = "us-west-2"
  
}

resource "aws_vpc" "my_vpc" {
    cidr_block = "10.0.0.0/16"
}
resource "aws_subnet" "my_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-west-2a"
}

resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic and all outbound traffic"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    description = "TLS from VPC"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [aws_vpc.my_vpc.cidr_block]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_network_interface" "my_nic" {
  subnet_id       = aws_subnet.my_subnet.id
  private_ips     = ["10.0.1.50"]
  security_groups = [aws_security_group.allow_tls.id]
}

resource "aws_instance" "my_instance" {
  ami           = "ami-005e54dee72cc1d00" 
  instance_type = "t2.micro"

  network_interface {
    network_interface_id = aws_network_interface.my_nic.id
    device_index         = 0
  }

  credit_specification {
    cpu_credits = "unlimited"
  }
}

###################################3
terraform.tfstate 
###################

    }
  ],
  "check_results": null
}
{
  "version": 4,
  "terraform_version": "1.5.0",
  "serial": 6,
  "lineage": "56644c67-16e3-b96c-25f2-c3bdb6f8d45e",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "my_instance",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-005e54dee72cc1d00",
            "arn": "arn:aws:ec2:us-west-2:851725482328:instance/i-0a540ef16ade96733",
            "associate_public_ip_address": false,
            "availability_zone": "us-west-2a",
            "capacity_reservation_specification": [
              {
                "capacity_reservation_preference": "open",
                "capacity_reservation_target": []
              }
            ],
            "cpu_core_count": 1,
            "cpu_options": [
              {
                "amd_sev_snp": "",
                "core_count": 1,
                "threads_per_core": 1
              }
            ],
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "unlimited"
              }
            ],
            "disable_api_stop": false,
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "enclave_options": [
              {
                "enabled": false
              }
            ],
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": "",
            "host_resource_group_arn": null,
            "iam_instance_profile": "",
            "id": "i-0a540ef16ade96733",
            "instance_initiated_shutdown_behavior": "stop",
            "instance_lifecycle": "",
            "instance_market_options": [],
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "",
            "launch_template": [],
            "maintenance_options": [
              {
                "auto_recovery": "default"
              }
            ],
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_protocol_ipv6": "disabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional",
                "instance_metadata_tags": "disabled"
              }
            ],
            "monitoring": false,
            "network_interface": [
              {
                "delete_on_termination": false,
                "device_index": 0,
                "network_card_index": 0,
                "network_interface_id": "eni-00439511f7d52b854"
              }
            ],
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "placement_partition_number": 0,
            "primary_network_interface_id": "eni-00439511f7d52b854",
            "private_dns": "ip-10-0-1-50.us-west-2.compute.internal",
            "private_dns_name_options": [
              {
                "enable_resource_name_dns_a_record": false,
                "enable_resource_name_dns_aaaa_record": false,
                "hostname_type": "ip-name"
              }
            ],
            "private_ip": "10.0.1.50",
            "public_dns": "",
            "public_ip": "",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/sda1",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "tags": {},
                "tags_all": {},
                "throughput": 0,
                "volume_id": "vol-03eeb0fe11431199c",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "secondary_private_ips": [],
            "security_groups": [],
            "source_dest_check": true,
            "spot_instance_request_id": "",
            "subnet_id": "subnet-0c5c66612bf9496df",
            "tags": null,
            "tags_all": {},
            "tenancy": "default",
            "timeouts": null,
            "user_data": null,
            "user_data_base64": null,
            "user_data_replace_on_change": false,
            "volume_tags": null,
            "vpc_security_group_ids": [
              "sg-0ec595bf37a90fbda"
            ]
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwicmVhZCI6OTAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_network_interface.my_nic",
            "aws_security_group.allow_tls",
            "aws_subnet.my_subnet",
            "aws_vpc.my_vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_network_interface",
      "name": "my_nic",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:851725482328:network-interface/eni-00439511f7d52b854",
            "attachment": [],
            "description": "",
            "id": "eni-00439511f7d52b854",
            "interface_type": "interface",
            "ipv4_prefix_count": 0,
            "ipv4_prefixes": [],
            "ipv6_address_count": 0,
            "ipv6_address_list": [],
            "ipv6_address_list_enabled": false,
            "ipv6_addresses": [],
            "ipv6_prefix_count": 0,
            "ipv6_prefixes": [],
            "mac_address": "06:19:52:08:63:c1",
            "outpost_arn": "",
            "owner_id": "851725482328",
            "private_dns_name": "",
            "private_ip": "10.0.1.50",
            "private_ip_list": [
              "10.0.1.50"
            ],
            "private_ip_list_enabled": false,
            "private_ips": [
              "10.0.1.50"
            ],
            "private_ips_count": 0,
            "security_groups": [
              "sg-0ec595bf37a90fbda"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-0c5c66612bf9496df",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "aws_security_group.allow_tls",
            "aws_subnet.my_subnet",
            "aws_vpc.my_vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "allow_tls",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:851725482328:security-group/sg-0ec595bf37a90fbda",
            "description": "Allow TLS inbound traffic and all outbound traffic",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0ec595bf37a90fbda",
            "ingress": [
              {
                "cidr_blocks": [
                  "10.0.0.0/16"
                ],
                "description": "TLS from VPC",
                "from_port": 443,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 443
              }
            ],
            "name": "allow_tls",
            "name_prefix": "",
            "owner_id": "851725482328",
            "revoke_rules_on_delete": false,
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0596e12b409f8c5f3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6OTAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0=",
          "dependencies": [
            "aws_vpc.my_vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_subnet",
      "name": "my_subnet",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:851725482328:subnet/subnet-0c5c66612bf9496df",
            "assign_ipv6_address_on_creation": false,
            "availability_zone": "us-west-2a",
            "availability_zone_id": "usw2-az2",
            "cidr_block": "10.0.1.0/24",
            "customer_owned_ipv4_pool": "",
            "enable_dns64": false,
            "enable_lni_at_device_index": 0,
            "enable_resource_name_dns_a_record_on_launch": false,
            "enable_resource_name_dns_aaaa_record_on_launch": false,
            "id": "subnet-0c5c66612bf9496df",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_association_id": "",
            "ipv6_native": false,
            "map_customer_owned_ip_on_launch": false,
            "map_public_ip_on_launch": false,
            "outpost_arn": "",
            "owner_id": "851725482328",
            "private_dns_hostname_type_on_launch": "ip-name",
            "tags": null,
            "tags_all": {},
            "timeouts": null,
            "vpc_id": "vpc-0596e12b409f8c5f3"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "aws_vpc.my_vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_vpc",
      "name": "my_vpc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:us-west-2:851725482328:vpc/vpc-0596e12b409f8c5f3",
            "assign_generated_ipv6_cidr_block": false,
            "cidr_block": "10.0.0.0/16",
            "default_network_acl_id": "acl-04cd693f6eda975a3",
            "default_route_table_id": "rtb-0d7e11d3a8cddf457",
            "default_security_group_id": "sg-0ecd747e181956f25",
            "dhcp_options_id": "dopt-0d9b83a2c5a8ac141",
            "enable_dns_hostnames": false,
            "enable_dns_support": true,
            "enable_network_address_usage_metrics": false,
            "id": "vpc-0596e12b409f8c5f3",
            "instance_tenancy": "default",
            "ipv4_ipam_pool_id": null,
            "ipv4_netmask_length": null,
            "ipv6_association_id": "",
            "ipv6_cidr_block": "",
            "ipv6_cidr_block_network_border_group": "",
            "ipv6_ipam_pool_id": "",
            "ipv6_netmask_length": 0,
            "main_route_table_id": "rtb-0d7e11d3a8cddf457",
            "owner_id": "851725482328",
            "tags": null,
            "tags_all": {}
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]


#####################################################################################
variable.tf ,this file for modules
##################
variable "rgname" {
    type = string
    description = "used for naming resource group"
}

variable "location" {
    type = string 
    description = "used for selecting location"
}

variable "prefix" {
    type = string
    description = "The prefix used for all resources in this example"
}

variable "my_vpc" {
    type = string
    description = "this variable defines vpc"
}

variable "my_subnet" {
    type = string
    description = "defines subnet"
}

#########################################################
modules
dev.tf
###################
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}


module "module_dev" {
    location = "west-us-2"
    source = "./modules"
    prefix = "dev"
    my_vpc = "10.0.0.0/16"
    my_subnet = "10.0.1.0/24"
    rgname = "DevRG"
    
    
}

##########################3
prod.tf
#################

module "module_prod" {
    location = "west-us-2"
    source = "./modules"
    prefix = "prod"
    rgname = "ProdRG"
     my_vpc = "10.30.0.0/16"
    my_subnet = "10.30.1.0/24"
}

###########################
uat.tf
######################

module "module_uat" {
    location = "west-us-2"
    source = "./modules"
    prefix = "Uat"
    rgname = "UatRG"
    my_vpc = "10.40.0.0/16"
    my_subnet = "10.40.1.0/24"
}

#######################################
Backend or Remote state

terraform {
  backend "s3" {
    bucket = "mybucket"
    key    = "path/to/my/key"
    region = "us-east-1"
  }
}
#########################################
Create S3 bucket

resource "aws_s3_bucket" "example" {
  bucket = "my-tf-test-bucket"

  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}
###############################################
DynamoDB table:

resource "aws_dynamodb_table" "basic-dynamodb-table" {
  name           = "Statelock"
  billing_mode   = "PROVISIONED"
  read_capacity  = 20
  write_capacity = 20
  hash_key       = "UserId"
  range_key      = "GameTitle"

  attribute {
    name = "UserId"
    type = "S"
  }

  attribute {
    name = "GameTitle"
    type = "S"
  }

  attribute {
    name = "TopScore"
    type = "N"
  }

  ttl {
    attribute_name = "TimeToExist"
    enabled        = true
  }

  global_secondary_index {
    name               = "GameTitleIndex"
    hash_key           = "GameTitle"
    range_key          = "TopScore"
    write_capacity     = 10
    read_capacity      = 10
    projection_type    = "INCLUDE"
    non_key_attributes = ["UserId"]
  }

  tags = {
    Name        = "dynamodb-table-1"
    Environment = "production"
  }
}
############################################################
Data sources

data "aws_instance" "foo" {
  instance_id = "i-instanceid"

  filter {
    name   = "image-id"
    values = ["ami-xxxxxxxx"]
  }

  filter {
    name   = "tag:Name"
    values = ["instance-name-tag"]
  }
}
#################################################
LOcals:

locals {
  host        = aws_eks_cluster.example_0.endpoint
  certificate = base64decode(aws_eks_cluster.example_0.certificate_authority.data)
}

provider "helm" {
  kubernetes {
    host                   = local.host
    cluster_ca_certificate = local.certificate
    # exec allows for an authentication command to be run to obtain user
    # credentials rather than having them stored directly in the file
    exec {
      api_version = "client.authentication.k8s.io/v1beta1"
      args        = ["eks", "get-token", "--cluster-name", aws_eks_cluster.example_0.name]
      command     = "aws"
    }
  }
}

######################################################
File Provisioner:
#####
resource "aws_instance" "web" {
  # ...

  # Copies the myapp.conf file to /etc/myapp.conf
  provisioner "file" {
    source      = "conf/myapp.conf"
    destination = "/etc/myapp.conf"
  }

  # Copies the string in content into /tmp/file.log
  provisioner "file" {
    content     = "ami used: ${self.ami}"
    destination = "/tmp/file.log"
  }

  # Copies the configs.d folder to /etc/configs.d
  provisioner "file" {
    source      = "conf/configs.d"
    destination = "/etc"
  }

  # Copies all files and folders in apps/app1 to D:/IIS/webapp1
  provisioner "file" {
    source      = "apps/app1/"
    destination = "D:/IIS/webapp1"
  }
}
#######################################################
Local-exec Provisioner

resource "aws_instance" "web" {
  # ...

  provisioner "local-exec" {
    command = "echo ${self.private_ip} >> private_ips.txt"
  }
}

################################################################
Remote-exec Provisioner

resource "aws_instance" "web" {
  # ...

  # Establishes connection to be used by all
  # generic remote provisioners (i.e. file/remote-exec)
  connection {
    type     = "ssh"
    user     = "root"
    password = var.root_password
    host     = self.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "puppet apply",
      "consul join ${aws_instance.web.private_ip}",
    ]
  }
}

##############################################################
Terraform workspaces:

main.tf
dev.tfvars
prod.tfvars
variables.tf

to create new workspace ---->terraform workspace new dev
and switched to dev 

to show workspaces ---> terraform workspace list
same for prod
swiches to another env ----> terraform workspace select dev
then terraform init
terraform apply -var-file dev.tfvars

####################################################################
Terraform with DynamoDB:

resource "aws_dynamodb_table" "project_sapphire_inventory" {
  name           = "inventory"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "AssetID"

  attribute {
    name = "AssetID"
    type = "N"
  }
  attribute {
    name = "AssetName"
    type = "S"
  }
  attribute {
    name = "age"
    type = "N"
  }
  attribute {
    name = "Hardware"
    type = "B"
  }
  global_secondary_index {
    name             = "AssetName"
    hash_key         = "AssetName"
    projection_type    = "ALL"

  }
  global_secondary_index {
    name             = "age"
    hash_key         = "age"
    projection_type    = "ALL"

  }
  global_secondary_index {
    name             = "Hardware"
    hash_key         = "Hardware"
    projection_type    = "ALL"

  }
}
resource "aws_dynamodb_table_item" "upload" {
  table_name = aws_dynamodb_table.project_sapphire_inventory.name
  hash_key   = aws_dynamodb_table.project_sapphire_inventory.hash_key
  item = <<EOF
 {
  "AssetID": {"N": "1"},
  "AssetName": {"S": "printer"},
  "age": {"N": "5"},
  "Hardware": {"B": "true" }
}
EOF
}

##############################################################
Terraform with S3

resource "aws_s3_bucket" "dc_bucket" {
  bucket = "dc_is_better_than_marvel"
  }

resource "aws_s3_object" "upload" {
  bucket = "pixar-studios-2020"
  key    = "woody.jpg"
  source = "/root/woody.jpg"
}
#############################################################
Terraform with IAM

resource "aws_iam_user" "users" {
     name = "mary"
     region = "us-east-1"
}

update the iam-user.tf to make use of the count meta-argument to loop through the project-sapphire-users variable and create all the users in the list.

resource "aws_iam_user" "users" {
     name = var.project-sapphire-users[count.index]
     count = length(var.project-sapphire-users)
}

#######################################################################
Terraform Modules

Terraform modules are reusable blocks of configuration that allow you to define and manage multiple infrastructure resources as a single unit. 
They enable you to break down complex infrastructure deployments into smaller, more manageable pieces, promoting modularity and reusability.


A module for creating a virtual private cloud (VPC) with subnets and security groups
A module for provisioning a database cluster with scaling and backup policies
A module for deploying a load balancer with auto-scaling and SSL termination
By using Terraform modules, you can speed up your infrastructure deployments, reduce errors, and improve maintainability.

What is a Terraform module? A Terraform module is a collection of standard configuration files in a dedicated directory. 
Terraform modules encapsulate groups of resources dedicated to one task,
reducing the amount of code you have to develop for similar infrastructure components.

module "iam_iam-user" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-user"
  version = "5.28.0"
  # insert the 1 required variable here
  name = "sai"
}

#######################################################################
Using Provisioners:

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "us-west-2"
}
provider "aws" {
  alias = "west"
  region     = "us-west-2"
  #access_key = "AKIAW3MEAISABWULLWUG"
  secret_key = "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"
}

resource "aws_vpc" "my_vpc" {
    cidr_block = "10.0.0.0/16"
}
resource "aws_subnet" "my_subnet" {
  vpc_id     = aws_vpc.my_vpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-west-2a"
}

resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic and all outbound traffic"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    description = "TLS from VPC"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [aws_vpc.my_vpc.cidr_block]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_network_interface" "my_nic" {
  subnet_id       = aws_subnet.my_subnet.id
  private_ips     = ["10.0.1.50"]
  security_groups = [aws_security_group.allow_tls.id]
}

resource "aws_instance" "my_instance" {
  ami           = "ami-005e54dee72cc1d00" 
  instance_type = "t2.micro"

  tags = {
    name = "sai_instance"
  }

  provisioner "local-exec" {
    command =  "echo 'subnetID: ${self.subnet_id}'  >> subnetInfo.txt"
    
  }

  network_interface {
    network_interface_id = aws_network_interface.my_nic.id
    device_index         = 0
  }

  credit_specification {
    cpu_credits = "unlimited"
  }
}

########################################################

Create aws EKS by using Terraform 
####################################
main.tf

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
  region = "us-east-1"
}

resource "aws_eks_cluster" "example" {
  name     = "example"
  role_arn = aws_iam_role.eksClusterRole.arn

  vpc_config {
    subnet_ids = ["subnet-0db93f133f15daf79", "subnet-0874af9b0c91fa50a"]
  } 

  # Ensure that IAM Role permissions are created before and deleted after EKS Cluster handling.
  # Otherwise, EKS will not be able to properly delete EKS managed EC2 infrastructure such as Security Groups.
  depends_on = [
    aws_iam_role_policy_attachment.example-AmazonEKSClusterPolicy,
    aws_iam_role_policy_attachment.example-AmazonEKSVPCResourceController,
  ]
}

output "endpoint" {
  value = aws_eks_cluster.example.endpoint
}

output "kubeconfig-certificate-authority-data" {
  value = aws_eks_cluster.example.certificate_authority[0].data
}

data "aws_iam_policy_document" "assume_role" {
  statement {
    effect = "Allow"

    principals {
      type        = "Service"
      identifiers = ["eks.amazonaws.com"]
    }

    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "eksClusterRole" {
  name               = "eksClusterRole"
  assume_role_policy = data.aws_iam_policy_document.assume_role.json
}

resource "aws_iam_role_policy_attachment" "example-AmazonEKSClusterPolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eksClusterRole.name
}

# Optionally, enable Security Groups for Pods
# Reference: https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html
resource "aws_iam_role_policy_attachment" "example-AmazonEKSVPCResourceController" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
  role       = aws_iam_role.eksClusterRole.name
}



#To install KUbectl to access EKS

provider "null" {}

resource "null_resource" "install_kubectl" {
  provisioner "local-exec" {
    command = <<EOT
    # Define the current working directory
    WORKING_DIR=$(pwd)

    # Download the latest kubectl binary to the working directory
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

    # Make it executable
    chmod +x kubectl

    # Move it to the current working directory
    mv kubectl $WORKING_DIR

    # Verify the installation
    ./kubectl version --client
    EOT
  }
}

#Then apply commands
#terraform init 
#terraform apply

#Then  we should update kubeconfig by
aws eks --region us-east-1 update-kubeconfig --name example
#cat /etc/*release to check OS

#if AWS CLI is not installed we should instal aws cli

provider "null" {}

resource "null_resource" "install_aws_cli" {
  provisioner "local-exec" {
    command = <<EOT
    # Define the working directory (optional, typically /tmp or current dir)
    WORKING_DIR=$(pwd)

    # Download the AWS CLI installer (version 2)
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

    # Unzip the installer
    unzip awscliv2.zip -d $WORKING_DIR

    # Run the installer
    sudo $WORKING_DIR/aws/install

    # Verify the installation
    aws --version
    EOT
  }
}

output "aws_cli_installation_status" {
  value = "AWS CLI installed successfully"
}



############################################################################

