1.Variables and Data Types:
Variables store data, and Python supports various data types like integers, strings, lists, and dictionaries.

name = "sai"
age = 24
marks=[1,2,3,4]
dic={a:1,b:2}

#######################################
2.Control Statements:
Python supports if, else, elif for conditional logic, and loops like for and while for iterating over data.

number = -10

if number > 0:
    print("The number is positive")
elif number < 0:
    print("The number is negative")
else:
    print("The number is zero")

############################
3.Functions:
Functions are reusable blocks of code that can be called with different arguments.

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)
result = factorial(5)
print(f"The factorial of 5 is {result}")

####################################

4.Loops
Loops (for, while) are used to execute a block of code repeatedly.

for loop
numbers = [1, 2, 3, 4, 5]
for number in numbers:
    print(f"Number: {number}")

Using a while loop
count = 0
while count < 5:
    print(f"Count is: {count}")
    count += 1

##################################
5.Lists and List Comprehensions
Lists are ordered collections, and list comprehensions provide a concise way to create lists.


squares = []
for i in range(1, 6):
    squares.append(i ** 2)
squares_comprehension = [i ** 2 for i in range(1, 6)]
print(squares_comprehension)

####################################

6.Dictionaries
Dictionaries are collections of key-value pairs, useful for mapping and lookup operations.

person = {"name": "sai", "age": 25, "city": "Hyderabad"}
print(f"{person['name']} is {person['age']} years old and lives in {person['city']}.")

person["email"] = "saigulivindala9912@gmail.com"
print(person)

#######################################
7.File Handling
Python can read from and write to files using built-in functions.

with open("sai.txt", "w") as file:
    file.write("Hello, World!\n")

with open("sai.txt", "r") as file:
    content = file.read()
    print(content)

####################################
8.Error Handling
Python uses try, except, and finally to handle errors

try:
    result = 10 / 0
except ZeroDivisionError:
    print("Error: Division by zero is not allowed.")
finally:
    print("This block always executes.")

#########################################
9.Modules and Importing
You can use built-in modules or create your own to structure your code

# Importing a module
import math

# Using a function from the math module
print(f"The square root of 16 is {math.sqrt(16)}")

# Importing a specific function
from math import factorial

print(f"The factorial of 5 is {factorial(5)}")

#########################################
10. Object-Oriented Programming (OOP)
Python supports OOP, allowing you to define classes and create objects.

# Define a class
class Dog:
    def __init__(self, name, breed):
        self.name = name
        self.breed = breed

    def bark(self):
        return f"{self.name} says Woof!"

# Create an object of the Dog class
my_dog = Dog("Buddy", "Golden Retriever")

# Accessing attributes and methods
print(f"My dog {my_dog.name} is a {my_dog.breed}.")
print(my_dog.bark())

######################################
11. List and Dictionary Comprehensions
List comprehensions can be extended to dictionaries and sets, offering concise ways to create and manipulate these collections.


# List comprehension with condition
even_squares = [x**2 for x in range(10) if x % 2 == 0]
print(even_squares)

# Dictionary comprehension
squares_dict = {x: x**2 for x in range(1, 6)}
print(squares_dict)

######################################
12. Lambda Functions
Lambda functions are anonymous functions expressed as a single statement.


# Lambda function to square a number
square = lambda x: x**2

# Using lambda with map function
numbers = [1, 2, 3, 4]
squared_numbers = list(map(lambda x: x**2, numbers))
print(squared_numbers)

#########################################
13. Decorators
Decorators are a powerful feature that allows you to modify the behavior of a function or method.


# Define a simple decorator
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

# Apply the decorator
@my_decorator
def say_hello():
    print("Hello!")
say_hello()

########################################
14. Generators
Generators allow you to iterate over data without storing the entire sequence in memory, making them efficient for large datasets.


# Simple generator to yield squares of numbers
def square_generator(n):
    for i in range(n):
        yield i**2

# Using the generator
for square in square_generator(5):
    print(square)

########################################
15. Exception Handling with Custom Exceptions
You can define custom exceptions to handle specific error conditions in your code.


# Define a custom exception
class CustomError(Exception):
    pass

# Function that raises the custom exception
def check_value(x):
    if x < 0:
        raise CustomError("Negative value encountered!")
    return x

try:
    check_value(-1)
except CustomError as e:
    print(f"Error: {e}")

#############################################
16. Context Managers
Context managers simplify resource management, like opening and closing files, using the with statement.


# Custom context manager
class ManagedFile:
    def __init__(self, filename):
        self.filename = filename

    def __enter__(self):
        self.file = open(self.filename, 'w')
        return self.file

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.file.close()

# Using the custom context manager
with ManagedFile('example.txt') as file:
    file.write('Hello, World!')

#############################################
17. Iterators and Iterables
Understanding iterators and iterables helps in creating objects that can be looped over.


# Custom iterator
class MyIterator:
    def __init__(self, start, end):
        self.current = start
        self.end = end

    def __iter__(self):
        return self

    def __next__(self):
        if self.current >= self.end:
            raise StopIteration
        else:
            self.current += 1
            return self.current - 1

# Using the custom iterator
for number in MyIterator(1, 5):
    print(number)

###########################################
18. Regular Expressions
Regular expressions (regex) are used for string matching and manipulation.

import re

# Search for a pattern in a string
pattern = r'\b[a-zA-Z]{5}\b'
text = "These are some words: Python, regex, code."

matches = re.findall(pattern, text)
print(f"Words with exactly 5 letters: {matches}")

##############################################3
19. Multithreading and Multiprocessing
Python's threading and multiprocessing modules allow for concurrent execution of code.

import threading

def print_numbers():
    for i in range(5):
        print(i)

# Create a thread and start it
thread = threading.Thread(target=print_numbers)
thread.start()

# Wait for the thread to finish
thread.join()

#######################################
20. Working with APIs
Python's requests library allows you to interact with web APIs.

import requests

# Send a GET request to a web API
response = requests.get('https://jsonplaceholder.typicode.com/todos/1')

# Parse JSON response
data = response.json()
print(data)

#########################################
21. Unit Testing
Unit testing ensures your code functions as expected. Python's unittest module provides tools for creating and running tests.

import unittest

def add(x, y):
    return x + y

class TestMath(unittest.TestCase):
    def test_add(self):
        self.assertEqual(add(1, 2), 3)
        self.assertEqual(add(-1, 1), 0)

# Run the tests
if __name__ == '__main__':
    unittest.main()

##############################################
22. Type Hinting
Type hinting improves code readability and helps with static analysis.

def greet(name: str) -> str:
    return f"Hello, {name}!"

print(greet("Alice"))

###############################################
23. Working with Dates and Times
Pythonâ€™s datetime module is used for manipulating dates and times.

from datetime import datetime, timedelta

# Get the current date and time
now = datetime.now()

###################################################
# Format the date
formatted_date = now.strftime("%Y-%m-%d %H:%M:%S")
print(f"Current Date and Time: {formatted_date}")

# Calculate future dates
future_date = now + timedelta(days=10)
print(f"Date 10 days from now: {future_date.strftime('%Y-%m-%d')}")
These topics provide a solid foundation for more advanced Python scripting. Let me know if you want to dive deeper into any specific area or if there's something else you'd like to explore!

#######################################################
# calculator.py

# Function for addition
def add(x, y):
    return x + y

# Function for subtraction
def subtract(x, y):
    return x - y

# Function for multiplication
def multiply(x, y):
    return x * y

# Function for division
def divide(x, y):
    if y == 0:
        return "Error! Division by zero."
    else:
        return x / y

# Main function to perform calculation based on user input
def main():
    print("Select operation:")
    print("1. Add")
    print("2. Subtract")
    print("3. Multiply")
    print("4. Divide")

    choice = input("Enter choice (1/2/3/4): ")

    if choice in ['1', '2', '3', '4']:
        num1 = float(input("Enter first number: "))
        num2 = float(input("Enter second number: "))

        if choice == '1':
            print(f"{num1} + {num2} = {add(num1, num2)}")
        elif choice == '2':
            print(f"{num1} - {num2} = {subtract(num1, num2)}")
        elif choice == '3':
            print(f"{num1} * {num2} = {multiply(num1, num2)}")
        elif choice == '4':
            result = divide(num1, num2)
            print(f"{num1} / {num2} = {result}")
    else:
        print("Invalid input. Please select a valid option.")

if __name__ == "__main__":
    main()


save file with myCalculater.py and execute file by using command: python myCalculater.py

########################################################################################

















