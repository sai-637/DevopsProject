
import os
import sys
import pymysql
import time
from datetime import datetime

# Define paths
LOG_FILE = "/tmp/setup_mysql.log"  # Store logs in /tmp (Linux-friendly)
SQL_FILE = "/tmp/mydb.sql"  # Linux path where Terraform uploads the SQL file

# Function to log messages
def log_message(message):
    with open(LOG_FILE, "a") as log:
        log.write(f"{datetime.now()} - {message}\n")
    print(message)

# Ensure the DB_HOST is passed as an argument
if len(sys.argv) < 2:
    log_message("‚ùå Error: Please provide the DB_HOST as a command-line argument.")
    sys.exit(1)

DB_HOST = sys.argv[1]
DB_USER = "admin"
DB_PASSWORD = "SecurePassword123!"
DB_NAME = "mydb"

# Install MySQL client and required dependencies
def install_dependencies():
    try:
        log_message("‚è≥ Installing dependencies...")
        os.system("pip install --quiet pymysql")  # Silent installation
        log_message("‚úÖ Dependencies installed successfully.")
    except Exception as e:
        log_message(f"‚ùå Error during dependency installation: {e}")
        sys.exit(1)

# Install dependencies
install_dependencies()

# Function to connect to MySQL with retry logic
def connect_to_database(retries=3, delay=5):
    """Tries to connect to the database, retrying on failure."""
    for attempt in range(1, retries + 1):
        try:
            log_message(f"‚è≥ Attempt {attempt}/{retries}: Connecting to MySQL at {DB_HOST}...")
            connection = pymysql.connect(
                host=DB_HOST,
                user=DB_USER,
                password=DB_PASSWORD,
                database=DB_NAME,
                cursorclass=pymysql.cursors.DictCursor
            )
            log_message("‚úÖ Connected to MySQL successfully!")
            return connection
        except pymysql.MySQLError as e:
            log_message(f"‚ùå Connection failed: {e}")
            if attempt < retries:
                log_message(f"üîÑ Retrying in {delay} seconds...")
                time.sleep(delay)
            else:
                log_message("‚ùå All retry attempts failed. Exiting.", is_error=True)
                sys.exit(1)

# Connect to MySQL with retry logic
connection = connect_to_database()

try:
    with connection.cursor() as cursor:
        # üîπ Read the SQL file and execute its commands
        if os.path.exists(SQL_FILE):
            log_message(f"üìÇ Reading SQL file: {SQL_FILE}")
            with open(SQL_FILE, "r") as file:
                sql_script = file.read()

            # üîπ Split SQL commands and execute each one
            for query in sql_script.split(";"):
                query = query.strip()
                if query:
                    try:
                        log_message(f"üîÑ Executing query: {query}")
                        cursor.execute(query)
                        log_message("‚úÖ Query executed successfully.")
                    except pymysql.MySQLError as e:
                        log_message(f"‚ùå SQL Error: {e} | Query: {query}")

        else:
            log_message(f"‚ùå SQL file not found at {SQL_FILE}")

    connection.commit()
    log_message("‚úÖ Database changes committed successfully.")

except pymysql.MySQLError as e:
    log_message(f"‚ùå Database error: {e}")
except Exception as e:
    log_message(f"‚ùå General error: {e}")
finally:
    if 'connection' in locals() and connection.open:
        connection.close()
        log_message("üîí Database connection closed.")


######################################################################################
import os
import sys
import pymysql
from datetime import datetime

# Define the log file path
LOG_FILE = "/tmp/setup_mysql.log"

# Function to log messages to a file
def log_message(message):
    with open(LOG_FILE, "a") as log:
        log.write(f"{datetime.now()} - {message}\n")
    print(message)

# Accept DB_HOST as a command-line argument
if len(sys.argv) < 2:
    log_message("‚ùå Error: Please provide the DB_HOST as a command-line argument.")
    log_message("Usage: python3 setup_mysql.py <DB_HOST>")
    sys.exit(1)

# Get DB_HOST from command-line argument
DB_HOST = sys.argv[1]

# Set static database credentials
DB_USER = "admin"
DB_PASSWORD = "SecurePassword123!"
DB_NAME = "mydb"

# Install MySQL client and required packages
def install_dependencies():
    try:
        log_message("‚è≥ Installing dependencies...")
        os.system("sudo apt update -y && sudo apt install -y python3-pip mysql-client")
        os.system("pip3 install pymysql")
        log_message("‚úÖ Dependencies installed successfully.")
    except Exception as e:
        log_message(f"‚ùå Error during dependency installation: {e}")
        sys.exit(1)

# Install dependencies
install_dependencies()

try:
    # Connect to MySQL
    log_message("‚è≥ Connecting to the database...")
    connection = pymysql.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        cursorclass=pymysql.cursors.DictCursor
    )
    log_message("‚úÖ Connected to MySQL successfully!")

    with connection.cursor() as cursor:
        # List of SQL queries (with one wrong query for demonstration)
        queries = [
            """
            CREATE TABLE IF NOT EXISTS users (
                id INT PRIMARY KEY AUTO_INCREMENT,
                name VARCHAR(50)
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS orders (
                order_id INT PRIMARY KEY AUTO_INCREMENT,
                user_id INT,
                product_name VARCHAR(100),
                FOREIGN KEY (user_id) REFERENCES users(id)
            );
            """,
            """
            WRONG_SQL_COMMAND; -- Intentional error for demonstration
            """,
            """
            INSERT INTO users (name) VALUES ('Sai');
            """,
            """
            INSERT INTO orders (user_id, product_name) VALUES (1, 'Laptop');
            """
        ]

        # Execute each query and log errors if any occur
        for query in queries:
            try:
                log_message(f"üîÑ Executing query: {query.strip()}")
                cursor.execute(query)
                log_message("‚úÖ Query executed successfully.")
            except pymysql.MySQLError as e:
                log_message(f"‚ùå SQL Error: {e} | Query: {query.strip()}")

        # Perform a JOIN query to fetch combined data
        try:
            join_query = """
            SELECT users.name AS user_name, orders.product_name AS product
            FROM users
            INNER JOIN orders ON users.id = orders.user_id;
            """
            log_message(f"üîÑ Executing JOIN query: {join_query.strip()}")
            cursor.execute(join_query)
            result = cursor.fetchall()
            log_message(f"üìå Joined Records: {result}")
        except pymysql.MySQLError as e:
            log_message(f"‚ùå SQL Error during JOIN: {e}")

    # Commit the transaction
    connection.commit()

except pymysql.MySQLError as e:
    log_message(f"‚ùå Database error: {e}")
except Exception as e:
    log_message(f"‚ùå General error: {e}")
finally:
    if 'connection' in locals() and connection.open:
        connection.close()
        log_message("üîí Database connection closed.")

##############################################################################

import os
import sys
import pymysql
from datetime import datetime

# Define paths
LOG_FILE = "/tmp/setup_mysql.log"  # Store logs in /tmp (Linux-friendly)
SQL_FILE = "/tmp/mydb.sql"  # Linux path where Terraform uploads the SQL file


# Function to log messages
def log_message(message):
    with open(LOG_FILE, "a") as log:
        log.write(f"{datetime.now()} - {message}\n")
    print(message)

# Ensure the DB_HOST is passed as an argument
if len(sys.argv) < 2:
    log_message("‚ùå Error: Please provide the DB_HOST as a command-line argument.")
    sys.exit(1)

DB_HOST = sys.argv[1]
DB_USER = "admin"
DB_PASSWORD = "SecurePassword123!"
DB_NAME = "mydb"

# Install MySQL client and required dependencies
def install_dependencies():
    try:
        log_message("‚è≥ Installing dependencies...")
        os.system("pip install pymysql")  # Only pip install needed on Windows
        log_message("‚úÖ Dependencies installed successfully.")
    except Exception as e:
        log_message(f"‚ùå Error during dependency installation: {e}")
        sys.exit(1)

#Install dependencies
install_dependencies()

try:
    log_message("‚è≥ Connecting to the database...")
    connection = pymysql.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        cursorclass=pymysql.cursors.DictCursor
    )
    log_message("‚úÖ Connected to MySQL successfully!")

    with connection.cursor() as cursor:
        # üîπ Read the SQL file and execute its commands
        if os.path.exists(SQL_FILE):
            log_message(f"üìÇ Reading SQL file: {SQL_FILE}")
            with open(SQL_FILE, "r") as file:
                sql_script = file.read()

            # üîπ Split SQL commands and execute each one
            for query in sql_script.split(";"):
                query = query.strip()
                if query:
                    try:
                        log_message(f"üîÑ Executing query: {query}")
                        cursor.execute(query)
                        log_message("‚úÖ Query executed successfully.")
                    except pymysql.MySQLError as e:
                        log_message(f"‚ùå SQL Error: {e} | Query: {query}")

        else:
            log_message(f"‚ùå SQL file not found at {SQL_FILE}")

    connection.commit()

except pymysql.MySQLError as e:
    log_message(f"‚ùå Database error: {e}")
except Exception as e:
    log_message(f"‚ùå General error: {e}")
finally:
    if 'connection' in locals() and connection.open:
        connection.close()
        log_message("üîí Database connection closed.")
